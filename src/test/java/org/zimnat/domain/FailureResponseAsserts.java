package org.zimnat.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class FailureResponseAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFailureResponseAllPropertiesEquals(FailureResponse expected, FailureResponse actual) {
        assertFailureResponseAutoGeneratedPropertiesEquals(expected, actual);
        assertFailureResponseAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFailureResponseAllUpdatablePropertiesEquals(FailureResponse expected, FailureResponse actual) {
        assertFailureResponseUpdatableFieldsEquals(expected, actual);
        assertFailureResponseUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFailureResponseAutoGeneratedPropertiesEquals(FailureResponse expected, FailureResponse actual) {
        assertThat(expected)
            .as("Verify FailureResponse auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFailureResponseUpdatableFieldsEquals(FailureResponse expected, FailureResponse actual) {
        assertThat(expected)
            .as("Verify FailureResponse relevant properties")
            .satisfies(e -> assertThat(e.getPartnerReference()).as("check partnerReference").isEqualTo(actual.getPartnerReference()))
            .satisfies(e -> assertThat(e.getDate()).as("check date").isEqualTo(actual.getDate()))
            .satisfies(e -> assertThat(e.getVersion()).as("check version").isEqualTo(actual.getVersion()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFailureResponseUpdatableRelationshipsEquals(FailureResponse expected, FailureResponse actual) {
        assertThat(expected)
            .as("Verify FailureResponse relationships")
            .satisfies(e -> assertThat(e.getResponse()).as("check response").isEqualTo(actual.getResponse()));
    }
}
