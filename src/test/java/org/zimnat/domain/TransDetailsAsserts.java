package org.zimnat.domain;

import static org.assertj.core.api.Assertions.assertThat;
import static org.zimnat.domain.AssertUtils.bigDecimalCompareTo;

public class TransDetailsAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTransDetailsAllPropertiesEquals(TransDetails expected, TransDetails actual) {
        assertTransDetailsAutoGeneratedPropertiesEquals(expected, actual);
        assertTransDetailsAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTransDetailsAllUpdatablePropertiesEquals(TransDetails expected, TransDetails actual) {
        assertTransDetailsUpdatableFieldsEquals(expected, actual);
        assertTransDetailsUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTransDetailsAutoGeneratedPropertiesEquals(TransDetails expected, TransDetails actual) {
        assertThat(expected)
            .as("Verify TransDetails auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTransDetailsUpdatableFieldsEquals(TransDetails expected, TransDetails actual) {
        assertThat(expected)
            .as("Verify TransDetails relevant properties")
            .satisfies(e -> assertThat(e.getPolicyRef()).as("check policyRef").isEqualTo(actual.getPolicyRef()))
            .satisfies(e -> assertThat(e.getCoverStartDate()).as("check coverStartDate").isEqualTo(actual.getCoverStartDate()))
            .satisfies(e -> assertThat(e.getCoverEndDate()).as("check coverEndDate").isEqualTo(actual.getCoverEndDate()))
            .satisfies(
                e -> assertThat(e.getPremium()).as("check premium").usingComparator(bigDecimalCompareTo).isEqualTo(actual.getPremium())
            )
            .satisfies(e -> assertThat(e.getPayType()).as("check payType").isEqualTo(actual.getPayType()))
            .satisfies(e -> assertThat(e.getBusType()).as("check busType").isEqualTo(actual.getBusType()))
            .satisfies(e -> assertThat(e.getExtStatus()).as("check extStatus").isEqualTo(actual.getExtStatus()))
            .satisfies(e -> assertThat(e.getTransStatus()).as("check transStatus").isEqualTo(actual.getTransStatus()))
            .satisfies(e -> assertThat(e.getSyncStatus()).as("check syncStatus").isEqualTo(actual.getSyncStatus()))
            .satisfies(e -> assertThat(e.getCurrency()).as("check currency").isEqualTo(actual.getCurrency()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTransDetailsUpdatableRelationshipsEquals(TransDetails expected, TransDetails actual) {
        assertThat(expected)
            .as("Verify TransDetails relationships")
            .satisfies(e -> assertThat(e.getProduct()).as("check product").isEqualTo(actual.getProduct()))
            .satisfies(e -> assertThat(e.getClient()).as("check client").isEqualTo(actual.getClient()))
            .satisfies(e -> assertThat(e.getBranch()).as("check branch").isEqualTo(actual.getBranch()));
    }
}
