package org.zimnat.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class LICConfirmationResponseAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertLICConfirmationResponseAllPropertiesEquals(LICConfirmationResponse expected, LICConfirmationResponse actual) {
        assertLICConfirmationResponseAutoGeneratedPropertiesEquals(expected, actual);
        assertLICConfirmationResponseAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertLICConfirmationResponseAllUpdatablePropertiesEquals(
        LICConfirmationResponse expected,
        LICConfirmationResponse actual
    ) {
        assertLICConfirmationResponseUpdatableFieldsEquals(expected, actual);
        assertLICConfirmationResponseUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertLICConfirmationResponseAutoGeneratedPropertiesEquals(
        LICConfirmationResponse expected,
        LICConfirmationResponse actual
    ) {
        assertThat(expected)
            .as("Verify LICConfirmationResponse auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertLICConfirmationResponseUpdatableFieldsEquals(
        LICConfirmationResponse expected,
        LICConfirmationResponse actual
    ) {
        assertThat(expected)
            .as("Verify LICConfirmationResponse relevant properties")
            .satisfies(e -> assertThat(e.getResult()).as("check result").isEqualTo(actual.getResult()))
            .satisfies(e -> assertThat(e.getMessage()).as("check message").isEqualTo(actual.getMessage()))
            .satisfies(e -> assertThat(e.getLicenceID()).as("check licenceID").isEqualTo(actual.getLicenceID()))
            .satisfies(e -> assertThat(e.getReceiptID()).as("check receiptID").isEqualTo(actual.getReceiptID()))
            .satisfies(e -> assertThat(e.getvRN()).as("check vRN").isEqualTo(actual.getvRN()))
            .satisfies(e -> assertThat(e.getStatus()).as("check status").isEqualTo(actual.getStatus()))
            .satisfies(e -> assertThat(e.getLoadedBy()).as("check loadedBy").isEqualTo(actual.getLoadedBy()))
            .satisfies(e -> assertThat(e.getLoadedDate()).as("check loadedDate").isEqualTo(actual.getLoadedDate()))
            .satisfies(e -> assertThat(e.getApprovedBy()).as("check approvedBy").isEqualTo(actual.getApprovedBy()))
            .satisfies(e -> assertThat(e.getApprovedDate()).as("check approvedDate").isEqualTo(actual.getApprovedDate()))
            .satisfies(e -> assertThat(e.getiDNumber()).as("check iDNumber").isEqualTo(actual.getiDNumber()))
            .satisfies(e -> assertThat(e.getFirstName()).as("check firstName").isEqualTo(actual.getFirstName()))
            .satisfies(e -> assertThat(e.getLastName()).as("check lastName").isEqualTo(actual.getLastName()))
            .satisfies(e -> assertThat(e.getAddress1()).as("check address1").isEqualTo(actual.getAddress1()))
            .satisfies(e -> assertThat(e.getAddress2()).as("check address2").isEqualTo(actual.getAddress2()))
            .satisfies(e -> assertThat(e.getSuburbID()).as("check suburbID").isEqualTo(actual.getSuburbID()))
            .satisfies(e -> assertThat(e.getTransactionAmt()).as("check transactionAmt").isEqualTo(actual.getTransactionAmt()))
            .satisfies(e -> assertThat(e.getArrearsAmt()).as("check arrearsAmt").isEqualTo(actual.getArrearsAmt()))
            .satisfies(e -> assertThat(e.getPenaltiesAmt()).as("check penaltiesAmt").isEqualTo(actual.getPenaltiesAmt()))
            .satisfies(e -> assertThat(e.getAdministrationAmt()).as("check administrationAmt").isEqualTo(actual.getAdministrationAmt()))
            .satisfies(e -> assertThat(e.getTotalLicAmt()).as("check totalLicAmt").isEqualTo(actual.getTotalLicAmt()))
            .satisfies(e -> assertThat(e.getRadioTVAmt()).as("check radioTVAmt").isEqualTo(actual.getRadioTVAmt()))
            .satisfies(e -> assertThat(e.getRadioTVArrearsAmt()).as("check radioTVArrearsAmt").isEqualTo(actual.getRadioTVArrearsAmt()))
            .satisfies(e -> assertThat(e.getTotalRadioTVAmt()).as("check totalRadioTVAmt").isEqualTo(actual.getTotalRadioTVAmt()))
            .satisfies(e -> assertThat(e.getTotalAmount()).as("check totalAmount").isEqualTo(actual.getTotalAmount()))
            .satisfies(e -> assertThat(e.getTaxClass()).as("check taxClass").isEqualTo(actual.getTaxClass()))
            .satisfies(e -> assertThat(e.getNettMass()).as("check nettMass").isEqualTo(actual.getNettMass()))
            .satisfies(e -> assertThat(e.getLicExpiryDate()).as("check licExpiryDate").isEqualTo(actual.getLicExpiryDate()))
            .satisfies(e -> assertThat(e.getRadioTVExpiryDate()).as("check radioTVExpiryDate").isEqualTo(actual.getRadioTVExpiryDate()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertLICConfirmationResponseUpdatableRelationshipsEquals(
        LICConfirmationResponse expected,
        LICConfirmationResponse actual
    ) {}
}
