//***************************************************************************************************************************************************
//ENUMS

/**
 * Status enum.
 * @description - general status for various entities
 * @author CodeMaster.
 */
enum Status {
    ACTIVE, FRESH, PENDING, CANCELLED, COMPLETED, DELETED
}


/**
 * Title enum.
 * @description - Titles for various people
 * @author CodeMaster.
 */
enum Title {
    Mr,Mrs, Miss, Ms, Sir, Dr, Prof, Rev, Comm, Lieu, Capt
}

/**
 * IDType enum.
 * @description - Type of ID
 * @author CodeMaster.
 */
enum IDType {
    NationalID,Passport
}

/**
 * PayType enum.
 * @description - Type of payment
 * @author CodeMaster.
 */
enum PayType {
    Mobile,Swipe, Cash, StopOrder
}

/**
 * BusType enum.
 * @description - Type of business transaction
 * @author CodeMaster.
 */
enum BusType {
    NEW,RENEWAL, MTA, MTC
}

/**
 * BusType enum.
 * @description - Type of business transaction
 * @author CodeMaster.
 */
enum CurType {
    USD, ZWG, ZAR, GWP
}

/**
 * LICQuoteStatus enum.
 * @description - The licence quote approval status
 * @author CodeMaster.
 */
enum LICQuoteStatus {
    Approved, Rejected
}


/**
 * DeliveryMethod enum.
 * @description - The delivery method for licence disk
 * @author CodeMaster.
 */
enum DeliveryMethod {
    Cash
    ICEcash
    EcoCash
    Airtime
    Netone
    Telecel
    MasterorVisa
    Zimswitch
}



//***************************************************************************************************************************************************
//KYC MODULE


/**
 * SBU entity.
 * @description - the SBU entity for classification of business
 * @author CodeMaster.
 */
entity SBU {
    name String required  unique minlength(2) maxlength(30)
    code String required  unique minlength(2) maxlength(12)
    address String required minlength(6) maxlength(255)
    status Status required
}


/**
 * Branch entity.
 * @description - the branch entity for classification of business
 * @author CodeMaster.
 */
entity Branch {
    name String required minlength(2) maxlength(30)
    code String required minlength(2) maxlength(12)
    address String required minlength(6) maxlength(255)
    status Status required
}


/**
 * Address entity.
 * @description - the address of the customer
 * @author CodeMaster.
 */
entity Address {
    street String minlength(4) maxlength(255) required
    location String minlength(2) maxlength(60)
    city String minlength(2) maxlength(60)
    country String minlength(2) maxlength(60)
}



/**
 * Client entity.
 * @description - the entity for capturing client kyc details
 * @author CodeMaster.
 */
entity Client {
    title  Title required
    firstName String   required minlength(2) maxlength(60)
    lastName String    required minlength(2) maxlength(60)
    idType IDType required
    idNumber String required minlength(6) maxlength(14)
    dob LocalDate
    PhoneNumber String required minlength(9) maxlength(15)
    status Status required
}



//***************************************************************************************************************************************************
//TRANSACTION MODULE

/**
 * Product entity.
 * @description - The Product entity holding product information
 * @author CodeMaster.
 */
entity Product {
    name String required minlength(2) maxlength(50) unique
    description String required minlength(10) maxlength(255)
    code String minlength(2) maxlength(10)
    riskCode String required
    screenCode String required
    dataModelCode String required
}

/**
 * TransDetails entity.
 * @description - The TransDetails entity holding policy transaction information
 * @author CodeMaster.
 */
entity TransDetails {
    policyRef String minlength(6) maxlength(30)
    coverStartDate LocalDate required
    coverEndDate LocalDate required
    premium BigDecimal required min(0)
    payType PayType required
    busType BusType required
    extStatus Status required
    transStatus Status required
    syncStatus Status required
    currency CurType required
}



//***************************************************************************************************************************************************
//SYSTEM MODULE

/**
 * Setting entity.
 * @description - The Setting entity holding system settings information
 * @author CodeMaster.
 */
entity Setting {
    name String required minlength(2) maxlength(50) unique
    description String minlength(4) maxlength(255)
    value String required minlength(2) maxlength(50)
    effectiveDate LocalDate required
    lastDate LocalDate
    adminAccess Boolean
}



//***************************************************************************************************************************************************
//ICECASH COMMUNICATION MODULE

/**
 * Response entity.
 * @description - The Response entity holding response information
 * @author CodeMaster.
 */
entity Responses {
    Result String
    Message String
}

/**
 * QuoteResponse entity.
 * @description - The QuoteResponse entity holding licence Quote response information
 * @author CodeMaster.
 */
entity QuoteResponse {
    Result String
    Message String
}



/**
 * FailureResponse entity.
 * @description - The Request entity holding request failure response information
 * @author CodeMaster.
 */
entity FailureResponse {
    PartnerReference String
    Date String
    Version String
}

/**
 * BatchStatusRequest entity.
 * @description - The Request entity holding Batch Status request information
 * @author CodeMaster.
 */
entity BatchStatusRequest {
    theFunction String required
    insuranceIDBatch String required

}

/**
 * LICQuoteRequest entity.
 * @description - The LICQuoteRequest entity holding LICQuote request information
 * @author CodeMaster.
 */
entity LICQuoteRequest {
    theFunction String required
}

/**
 * Vehicle entity.
 * @description - The Vehicle entity holding vehicle information
 * @author CodeMaster.
 */
entity Vehicle {
    VRN String required
    IDNumber String required
    }

/**
 * BatchStatus entity.
 * @description - The BatchStatus entity holding batch status request parameters
 * @author CodeMaster.
 */
entity BatchStatus {

    PartnerReference String required
    theDate String required
    theVersion String required
    partnerToken String required
    }

/**
 * LICQuote entity.
 * @description - The LICQuote entity holding Licence quote request parameters
 * @author CodeMaster.
 */
entity LICQuote{
    partnerReference String required
    theDate String required
    theVersion String required
    partnerToken String required
}

/**
 * LICQuoteResponse entity.
 * @description - The LICQuoteResponse entity holding Licence quote response information
 * @author CodeMaster.
 */
entity LICQuoteResponse{
    partnerReference String
    theDate String
    theVersion String
}

/**
 * Quotes entity.
 * @description - The Quotes entity holding licence quote response information
 * @author CodeMaster.
 */
entity Quotes {
    VRN String
    LicenceID String,
    Result Integer
    Message String
    IDNumber String
    ClientIDType String
    FirstName String
    LastName String
    Address1 String
    Address2 String
    SuburbID String
    LicFrequency String
    RadioTVUsage String
    RadioTVFrequency String
    TaxClass String
    NettMass String
    LicExpiryDate String
    TransactionAmt String
    ArrearsAmt String
    PenaltiesAmt String,
    AdministrationAmt String
    TotalLicAmt String
    RadioTVAmt String
    RadioTVArrearsAmt String
    TotalRadioTVAmt String
    TotalAmount String
    }


/**
 * LICQuoteUpdate entity.
 * @description - The LICQuoteUpdate entity holding licence quote update (approve or reject) request parameters
 * @author CodeMaster.
 */
entity LICQuoteUpdate {

    PartnerReference String required
    theDate String required
    theVersion String required
    partnerToken String required
    LicenceID String required
    Status Boolean required
    PaymentMethod PayType required
    DeliveryMethod DeliveryMethod required
}


/**
 * LICResult entity.
 * @description - The LICResult entity licence confirmation request parameters
 * @author CodeMaster.
 */
entity LICResult {
    PartnerReference String required
    theDate String required
    theVersion String required
    partnerToken String required
    LicenceID String required
    Function String required
}

/**
 * LICResultResponse entity.
 * @description - The LICResultResponse entity holding licence confirmation response information
 * @author CodeMaster.
 */
entity LICResultResponse {
    PartnerReference String
    theDate String
    Version String

}

/**
 * LICQuoteUpdate entity.
 * @description - The LICQuoteUpdate entity holding licence confirmation response information inside of LICResultResponse
 * @author CodeMaster.
 */
entity LICConfirmationResponse {
    Result String
    Message String
    LicenceID String
    ReceiptID String
    VRN String
    Status String
    LoadedBy String
    LoadedDate String
    ApprovedBy String
    ApprovedDate String
    IDNumber String
    FirstName String
    LastName String
    Address1 String
    Address2 String
    SuburbID String
    TransactionAmt String
    ArrearsAmt String
    PenaltiesAmt String
    AdministrationAmt String
    TotalLicAmt String
    RadioTVAmt String
    RadioTVArrearsAmt String
    TotalRadioTVAmt String
    TotalAmount String
    TaxClass String
    NettMass String
    LicExpiryDate String
    RadioTVExpiryDate String
}


/**
 * TPILICQuote entity.
 * @description - The TPILICQuote entity licence and insurance request parameters
 * @author CodeMaster.
 */
entity TPILICQuote {
    PartnerReference UUID required
    theDate String required
    theVersion String required
    partnerToken String required
    Function String required
}

//***************************************************************************************************************************************************
//ENTITY RELATIONSHIPS

//defining May to Many relationships
/*relationship ManyToMany {
    Product{ProductBenefit(benefit)} to Benefit

}*/

//defining May to One relationships
relationship ManyToOne {
    Client{address} to Address
    TransDetails{product} to Product
    TransDetails{client} to Client
    TransDetails{branch} to Branch
    Branch{familyCasket} to SBU
    LICQuoteRequest{Vehicles} to Vehicle
    QuoteResponse{Quotes} to Quotes

}


// defining multiple One To One relationships
relationship OneToOne {
    BatchStatus{Request} to BatchStatusRequest
    LICQuote{Request} to LICQuoteRequest
    FailureResponse{Response} to Responses
    LICQuoteResponse{Response} to QuoteResponse
    LICResultResponse{Response} to LICConfirmationResponse
}

// Set pagination options
//paginate all entities with infinite-scroll
paginate all with pagination

// Use Data Transfer Objects (DTO)
// dto * with mapstruct

// Set service options to all except few
service all with serviceImpl //except Employee, Job

// Set an angular suffix
// angularSuffix * with mySuffix
